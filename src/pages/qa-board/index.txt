import { useMemo, useState } from "react";
import GlobalLayout from "../../components/layouts/GlobalLayout";
import styles from "./styles.module.scss";
import QaHeader from "./QaHeader";
import QaAddBar from "./QaAddBar";

const keywords = "qa board";
const metaTitle = "Airport Pickup London QA Board";
const metaDescription = "You can find frequently asked questions and answers about our airport pickup services in London.";

const mockData = [
    { id: "q1", question: "How would you handle an angry customer?", answer: "I would stay calm and listen carefully without interrupting. I'd show empathy and offer a practical solution (reassign driver/provide ETA). If beyond my authority, I’d escalate while keeping the customer updated." },
    { id: "q2", question: "How would you calm a customer who missed their flight due to traffic?", answer: "I'd show empathy first, then help with next steps—rearrange transport, provide receipt for insurance, or route to the best alternative. Ensure they feel supported even if we can't fix everything." },
    { id: "q3", question: "How would you dispatch a last-minute job?", answer: "Quickly check nearest available drivers, pick one who can reach on time, call to confirm, then update system and inform the customer with driver details and ETA." },
];



const QaBoard = () => {
    const [items, setItems] = useState(mockData);
    const [editing, setEditing] = useState(null); // { id, field: 'question' | 'answer', value }
    const [query, setQuery] = useState("");

    // add form state
    const [showNew, setShowNew] = useState(false);
    const [newQ, setNewQ] = useState("");
    const [newA, setNewA] = useState("");

    const startEdit = (id, field, initialValue) => setEditing({ id, field, value: initialValue });
    const cancelEdit = () => setEditing(null);
    const saveEdit = () => {
        if (!editing) return;
        setItems(prev => prev.map(it => it.id === editing.id ? { ...it, [editing.field]: editing.value } : it));
        setEditing(null);
    };

    const deleteQnA = (id) => {
        setItems(prev => prev.filter(it => it.id !== id));
    }
    // create id
    const genId = () => "q" + (Date.now().toString(36) + Math.random().toString(36).slice(2, 6));


    // add new item
    const addNew = () => {
        const q = newQ.trim(), a = newA.trim();
        if (!q || !a) return;
        setItems(prev => [...prev, { id: genId(), question: q, answer: a },]);
        setNewQ(""); setNewA(""); setShowNew(false);
    };

    // delete (discard) the opened add box
    const discardNew = () => {
        setNewQ("");
        setNewA("");
        setShowNew(false);
    };

    // filter (question or answer)
    const filtered = useMemo(() => {
        const q = query.trim().toLowerCase();
        if (!q) return items;
        return items.filter(it => it.question.toLowerCase().includes(q) || it.answer.toLowerCase().includes(q));
    }, [items, query]);

    return (
        <GlobalLayout keywords={keywords} title={metaTitle} description={metaDescription} footerbggray={true}>
            <div className={`${styles.qa} page`}>
                <div className={`page_section`}>
                    <div className={`page_section_container`}>

                        {/* Header */}
                        <QaHeader setQuery={setQuery} query={query} />

                        {/* Add bar */}
                        <QaAddBar items={items} showNew={showNew} setShowNew={setShowNew} newQ={newQ} setNewQ={setNewQ} newA={newA} setNewA={setNewA} addNew={addNew} discardNew={discardNew} />

                        {/* List */}
                        <div className={styles.list}>
                            {filtered.length === 0 ? (
                                <div className={styles.empty}>No results found.</div>
                            ) : (
                                filtered.map((it, idx) => {
                                    const isEditingQ = editing?.id === it.id && editing?.field === "question";
                                    const isEditingA = editing?.id === it.id && editing?.field === "answer";
                                    const qIndex = idx + 1;

                                    return (
                                        <div key={it.id} className={styles.item}>
                                            {/* Question Row */}
                                            <div className={styles.line}>
                                                <div className={styles.qLabel}>{`Q${qIndex}.`}</div>
                                                <div className={styles.content}>
                                                    <h3 className={styles.qTitle}>
                                                        {isEditingQ ? (
                                                            <input className={styles.input} value={editing.value} onChange={(e) => setEditing(s => ({ ...s, value: e.target.value }))} placeholder="Question..." />
                                                        ) : (it.question)}
                                                    </h3>
                                                </div>
                                                <div className={styles.actions}>
                                                    {isEditingQ ? (
                                                        <>
                                                            <button className={styles.saveBtn} onClick={saveEdit}>Save</button>
                                                            <button className={styles.cancelBtn} onClick={cancelEdit}>Cancel</button>
                                                        </>
                                                    ) : (
                                                        <>
                                                            <button title="Edit this Q&A" className={styles.editBtn} onClick={() => startEdit(it.id, "question", it.question)}>
                                                                <i className="fas fa-edit"></i>
                                                            </button>
                                                            <button className={styles.cancelBtn} onClick={() => deleteQnA(it.id)} title="Delete this Q&A">
                                                                <i className="fa-solid fa-trash" />
                                                            </button>

                                                        </>
                                                    )}
                                                </div>
                                            </div>

                                            {/* Answer Row */}
                                            <div className={`${styles.line} ${styles.answerLine}`}>
                                                <div className={styles.aLabel}>A:</div>
                                                <div className={styles.content}>
                                                    {isEditingA ? (
                                                        <textarea className={styles.textarea} rows={3} value={editing.value} onChange={(e) => setEditing(s => ({ ...s, value: e.target.value }))} placeholder="Answer..." />
                                                    ) : (
                                                        <p className={styles.answer}>{it.answer}</p>
                                                    )}
                                                </div>
                                                <div className={styles.actions}>
                                                    {isEditingA ? (
                                                        <>
                                                            <button className={styles.saveBtn} onClick={saveEdit}>Save</button>
                                                            <button className={styles.cancelBtn} onClick={cancelEdit}>Cancel</button>
                                                        </>
                                                    ) : (
                                                        <button className={styles.editBtn} onClick={() => startEdit(it.id, "answer", it.answer)}>
                                                            <i className="fas fa-edit"></i>
                                                        </button>
                                                    )}
                                                </div>
                                            </div>
                                        </div>
                                    );
                                })
                            )}
                        </div>

                        <br /><br />
                    </div>
                </div>
            </div>
        </GlobalLayout>
    );
};

export default QaBoard;
